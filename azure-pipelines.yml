variables:
  - name: dockerVersion
    value: '19.03.5'
  - name: dotnetVersion
    value: '3.x'
  - name: MSBUILDSINGLELOADCONTEXT
    value: '1'
  - group: dev-secrets

trigger:
- master
- development

pr:
- master
- development

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: version
  displayName: Work out Version
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.0.1'
  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep
  - script: echo semVer $(setVersionStep.semVer)
    name: echovar

- job: buildAndTest
  displayName: Run Unit & Integration tests
  steps:
  - task: DockerInstaller@0
    inputs:
      dockerVersion: $(dockerVersion)
    displayName: 'Docker: Install - $(dockerVersion)'

  - task: UseDotNet@2
    displayName: 'Use DotNet Core $(dotnetVersion)'
    inputs:
      packageType: 'sdk'
      version: $(dotnetVersion)
      includePreviewVersions: false

  - script: docker-compose -f "docker-compose.integration.yml" up --build -d
    displayName: 'Docker-compose up'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: test
      projects: '**/*API.Tests/*.csproj'
      arguments: '-v n  --collect "Code coverage"'

  - task: DotNetCoreCLI@2
    displayName: 'Run Integration tests'
    inputs:
      command: test
      projects: '**/*Integration.Tests/*.csproj'
      arguments: '-v n'

  - script: docker-compose -f "docker-compose.integration.yml" down -v
    displayName: 'Docker-compose down'
    condition: always()

- job: dockerBuildAndPush
  displayName: Build and push docker containers to the acr
  variables:
    semVer: $[ dependencies.version.outputs['setVersionStep.semVer'] ]
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))
  dependsOn: 
    - version
    - buildAndTest
  steps:
  - task: DockerCompose@0
    displayName: 'Build: Dev'
    inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
        azureContainerRegistry: '{"loginServer":"gpitfuturesdevacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-dev-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesdevacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Build services'
        additionalImageTags: '$(semVer)'
        includeSourceTags: true

  - task: DockerCompose@0
    displayName: 'Docker Push: Dev'
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturesdevacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-dev-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesdevacr"}'
      dockerComposeFile: '**/docker-compose.yml'
      action: 'Push services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true

  - task: HelmInstaller@1
    displayName: 'Install helm'
    inputs:
      helmVersionToInstall: 'latest'
  - bash: |
      cd charts
      helm package \
          --version $(semVer) \
          --app-version $(semVer) \
          dapi
    failOnStderr: true
    displayName: 'Helm package'
  - bash: |
      cd charts
      chartPackage=$(ls dapi-*.tgz)
      az acr helm push --force \
          -n "gpitfuturesdevacr" \
          -u "gpitfuturesdevacr" \
          -p $(gpitfuturesdevacr-pass) \
          $chartPackage   
    failOnStderr: false
    name: helmPush
    displayName: 'Push helm to az acr'

  - task: DockerCompose@0
    displayName: 'Docker Build: Test'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/development')))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturestestacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-test-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturestestacr"}'
      dockerComposeFile: '**/docker-compose.yml'
      action: 'Build services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true

  - task: DockerCompose@0
    displayName: 'Docker Push: Test'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/development')))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturestestacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-test-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturestestacr"}'
      dockerComposeFile: '**/docker-compose.yml'
      action: 'Push services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true

  - task: DockerCompose@0
    displayName: 'Docker Build: Prod'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturesprodacr.azurecr.io", "id" : "/subscriptions/d1be8dbc-1a9f-4b7b-ba51-037116110e00/resourceGroups/gpitfutures-prod-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesprodacr"}'
      dockerComposeFile: '**/docker-compose.yml'
      action: 'Build services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true

  - task: DockerCompose@0
    displayName: 'Docker Push: Prod'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturesprodacr.azurecr.io", "id" : "/subscriptions/d1be8dbc-1a9f-4b7b-ba51-037116110e00/resourceGroups/gpitfutures-prod-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesprodacr"}'
      dockerComposeFile: '**/docker-compose.yml'
      action: 'Push services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true
